/* The following code was generated by JFlex 1.6.1 */

package svgTester.svg;
import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>svg.flex</tt>
 */
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int VALUE = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\12\1\10\1\27\1\30\1\11\22\0\1\12\1\32\1\33"+
    "\1\22\4\0\2\7\1\31\1\7\1\0\1\2\1\4\1\20\1\3"+
    "\11\1\1\17\1\35\1\24\1\34\1\25\1\26\1\0\6\23\24\5"+
    "\4\0\1\6\1\0\6\23\1\5\1\13\7\5\1\15\2\5\1\16"+
    "\1\14\6\5\12\0\1\27\44\0\1\21\12\0\1\21\4\0\1\21"+
    "\5\0\4\21\1\6\21\21\1\6\1\0\4\21\1\6\2\21\1\6"+
    "\4\21\1\6\21\21\1\6\1\0\4\21\1\6\u01c5\21\4\0\14\21"+
    "\16\0\5\21\7\0\1\21\1\0\1\21\21\0\165\21\1\0\2\21"+
    "\2\0\4\21\1\0\1\21\6\0\1\21\1\0\3\21\1\0\1\21"+
    "\1\0\24\21\1\0\123\21\1\0\213\21\1\0\255\21\1\0\46\21"+
    "\2\0\1\21\7\0\47\21\11\0\55\21\1\0\1\21\1\0\2\21"+
    "\1\0\2\21\1\0\1\21\10\0\33\21\5\0\3\21\35\0\13\21"+
    "\5\0\100\21\12\21\4\0\146\21\1\0\10\21\2\0\12\21\1\0"+
    "\6\21\12\21\3\21\2\0\1\21\20\0\73\21\2\0\145\21\16\0"+
    "\12\21\54\21\4\0\1\21\5\0\56\21\22\0\34\21\104\0\23\21"+
    "\61\0\200\21\2\0\12\21\1\0\23\21\1\0\10\21\2\0\2\21"+
    "\2\0\26\21\1\0\7\21\1\0\1\21\3\0\4\21\2\0\11\21"+
    "\2\0\2\21\2\0\4\21\10\0\1\21\4\0\2\21\1\0\5\21"+
    "\2\0\12\21\2\21\17\0\3\21\1\0\6\21\4\0\2\21\2\0"+
    "\26\21\1\0\7\21\1\0\2\21\1\0\2\21\1\0\2\21\2\0"+
    "\1\21\1\0\5\21\4\0\2\21\2\0\3\21\3\0\1\21\7\0"+
    "\4\21\1\0\1\21\7\0\12\21\6\21\13\0\3\21\1\0\11\21"+
    "\1\0\3\21\1\0\26\21\1\0\7\21\1\0\2\21\1\0\5\21"+
    "\2\0\12\21\1\0\3\21\1\0\3\21\2\0\1\21\17\0\4\21"+
    "\2\0\12\21\21\0\3\21\1\0\10\21\2\0\2\21\2\0\26\21"+
    "\1\0\7\21\1\0\2\21\1\0\5\21\2\0\11\21\2\0\2\21"+
    "\2\0\3\21\10\0\2\21\4\0\2\21\1\0\5\21\2\0\12\21"+
    "\1\0\1\21\20\0\2\21\1\0\6\21\3\0\3\21\1\0\4\21"+
    "\3\0\2\21\1\0\1\21\1\0\2\21\3\0\2\21\3\0\3\21"+
    "\3\0\14\21\4\0\5\21\3\0\3\21\1\0\4\21\2\0\1\21"+
    "\6\0\1\21\16\0\12\21\20\0\4\21\1\0\10\21\1\0\3\21"+
    "\1\0\27\21\1\0\20\21\3\0\10\21\1\0\3\21\1\0\4\21"+
    "\7\0\2\21\1\0\2\21\6\0\4\21\2\0\12\21\21\0\3\21"+
    "\1\0\10\21\1\0\3\21\1\0\27\21\1\0\12\21\1\0\5\21"+
    "\2\0\11\21\1\0\3\21\1\0\4\21\7\0\2\21\7\0\1\21"+
    "\1\0\4\21\2\0\12\21\1\0\2\21\16\0\3\21\1\0\10\21"+
    "\1\0\3\21\1\0\51\21\2\0\10\21\1\0\3\21\1\0\5\21"+
    "\10\0\1\21\10\0\4\21\2\0\12\21\12\0\6\21\2\0\2\21"+
    "\1\0\22\21\3\0\30\21\1\0\11\21\1\0\1\21\2\0\7\21"+
    "\3\0\1\21\4\0\6\21\1\0\1\21\1\0\10\21\6\0\12\21"+
    "\2\0\2\21\15\0\72\21\5\0\17\21\1\0\12\21\47\0\2\21"+
    "\1\0\1\21\2\0\2\21\1\0\1\21\2\0\1\21\6\0\4\21"+
    "\1\0\7\21\1\0\3\21\1\0\1\21\1\0\1\21\2\0\2\21"+
    "\1\0\15\21\1\0\3\21\2\0\5\21\1\0\1\21\1\0\6\21"+
    "\2\0\12\21\2\0\4\21\40\0\1\21\27\0\2\21\6\0\12\21"+
    "\13\0\1\21\1\0\1\21\1\0\1\21\4\0\12\21\1\0\44\21"+
    "\4\0\24\21\1\0\22\21\1\0\44\21\11\0\1\21\71\0\100\21"+
    "\12\21\6\0\100\21\12\21\4\21\2\0\46\21\1\0\1\21\5\0"+
    "\1\21\2\0\53\21\1\0\u014d\21\1\0\4\21\2\0\7\21\1\0"+
    "\1\21\1\0\4\21\2\0\51\21\1\0\4\21\2\0\41\21\1\0"+
    "\4\21\2\0\7\21\1\0\1\21\1\0\4\21\2\0\17\21\1\0"+
    "\71\21\1\0\4\21\2\0\103\21\2\0\3\21\40\0\20\21\20\0"+
    "\125\21\14\0\u026c\21\2\0\21\21\1\0\32\21\5\0\113\21\3\0"+
    "\13\21\7\0\15\21\1\0\7\21\13\0\25\21\13\0\24\21\14\0"+
    "\15\21\1\0\3\21\1\0\2\21\14\0\124\21\3\0\1\21\4\0"+
    "\2\21\2\0\12\21\41\0\3\21\2\0\12\21\6\0\130\21\10\0"+
    "\53\21\5\0\106\21\12\0\37\21\1\0\14\21\4\0\14\21\12\0"+
    "\12\21\36\21\2\0\5\21\13\0\54\21\4\0\32\21\6\0\12\21"+
    "\46\0\34\21\4\0\77\21\1\0\35\21\2\0\1\21\12\21\6\0"+
    "\12\21\15\0\1\21\10\0\17\21\101\0\114\21\4\0\12\21\21\0"+
    "\11\21\14\0\60\21\12\21\72\21\14\0\70\21\10\0\12\21\3\0"+
    "\3\21\12\21\44\21\122\0\3\21\1\0\43\21\1\0\2\21\6\0"+
    "\366\21\6\0\u011a\21\2\0\6\21\2\0\46\21\2\0\6\21\2\0"+
    "\10\21\1\0\1\21\1\0\1\21\1\0\1\21\1\0\37\21\2\0"+
    "\65\21\1\0\7\21\1\0\1\21\3\0\3\21\1\0\7\21\3\0"+
    "\4\21\2\0\6\21\4\0\15\21\5\0\3\21\1\0\7\21\53\0"+
    "\1\27\1\27\25\0\2\21\23\0\1\21\34\0\1\21\15\0\1\21"+
    "\20\0\15\21\63\0\41\21\21\0\1\21\4\0\1\21\2\0\12\21"+
    "\1\0\1\21\3\0\5\21\6\0\1\21\1\0\1\21\1\0\1\21"+
    "\1\0\4\21\1\0\13\21\2\0\4\21\5\0\5\21\4\0\1\21"+
    "\21\0\51\21\u032d\0\64\21\u0716\0\57\21\1\0\57\21\1\0\205\21"+
    "\6\0\11\21\14\0\46\21\1\0\1\21\5\0\1\21\2\0\70\21"+
    "\7\0\1\21\17\0\30\21\11\0\7\21\1\0\7\21\1\0\7\21"+
    "\1\0\7\21\1\0\7\21\1\0\7\21\1\0\7\21\1\0\7\21"+
    "\1\0\40\21\57\0\1\21\u01d5\0\3\21\31\0\17\21\1\0\5\21"+
    "\2\0\5\21\4\0\126\21\2\0\2\21\2\0\3\21\1\0\132\21"+
    "\1\0\4\21\5\0\51\21\3\0\136\21\21\0\33\21\65\0\20\21"+
    "\u0200\0\u19b6\21\112\0\u51cd\21\63\0\u048d\21\103\0\56\21\2\0\u010d\21"+
    "\3\0\20\21\12\21\2\21\24\0\63\21\1\0\12\21\1\0\37\21"+
    "\1\0\123\21\45\0\11\21\2\0\147\21\2\0\4\21\1\0\36\21"+
    "\2\0\2\21\105\0\61\21\30\0\64\21\14\0\105\21\13\0\12\21"+
    "\6\0\30\21\3\0\1\21\4\0\12\21\44\21\2\0\44\21\14\0"+
    "\35\21\3\0\101\21\16\0\1\21\12\21\6\0\20\21\12\21\5\21"+
    "\1\0\67\21\11\0\16\21\2\0\12\21\6\0\27\21\3\0\111\21"+
    "\30\0\3\21\2\0\20\21\2\0\5\21\12\0\6\21\2\0\6\21"+
    "\2\0\6\21\11\0\7\21\1\0\7\21\1\0\53\21\1\0\4\21"+
    "\4\0\2\21\132\0\53\21\1\0\2\21\2\0\12\21\6\0\u2ba4\21"+
    "\14\0\27\21\4\0\61\21\u2104\0\u016e\21\2\0\152\21\46\0\7\21"+
    "\14\0\5\21\5\0\14\21\1\0\15\21\1\0\5\21\1\0\1\21"+
    "\1\0\2\21\1\0\2\21\1\0\154\21\41\0\u016b\21\22\0\100\21"+
    "\2\0\66\21\50\0\14\21\4\0\20\21\20\0\16\21\5\0\2\21"+
    "\30\0\3\21\40\0\5\21\1\0\207\21\23\0\12\21\7\0\32\21"+
    "\4\0\1\21\1\0\32\21\13\0\131\21\3\0\6\21\2\0\6\21"+
    "\2\0\6\21\2\0\3\21\43\0\14\21\1\0\32\21\1\0\23\21"+
    "\1\0\2\21\1\0\17\21\2\0\16\21\42\0\173\21\105\0\65\21"+
    "\210\0\1\21\202\0\35\21\3\0\61\21\17\0\1\21\37\0\40\21"+
    "\20\0\33\21\5\0\53\21\5\0\36\21\2\0\44\21\4\0\10\21"+
    "\1\0\5\21\52\0\236\21\2\0\12\21\126\0\50\21\10\0\64\21"+
    "\234\0\u0137\21\11\0\26\21\12\0\10\21\230\0\6\21\2\0\1\21"+
    "\1\0\54\21\1\0\2\21\3\0\1\21\2\0\27\21\12\0\27\21"+
    "\11\0\37\21\141\0\26\21\12\0\32\21\106\0\70\21\6\0\2\21"+
    "\100\0\4\21\1\0\2\21\5\0\10\21\1\0\3\21\1\0\33\21"+
    "\4\0\3\21\4\0\1\21\40\0\35\21\3\0\35\21\43\0\10\21"+
    "\1\0\36\21\31\0\66\21\12\0\26\21\12\0\23\21\15\0\22\21"+
    "\156\0\111\21\u03b7\0\107\21\37\0\12\21\17\0\74\21\25\0\31\21"+
    "\7\0\12\21\6\0\65\21\1\0\12\21\20\0\44\21\2\0\1\21"+
    "\11\0\105\21\13\0\12\21\1\21\45\0\22\21\1\0\45\21\170\0"+
    "\73\21\5\0\12\21\7\0\3\21\1\0\10\21\2\0\2\21\2\0"+
    "\26\21\1\0\7\21\1\0\2\21\1\0\5\21\2\0\11\21\2\0"+
    "\2\21\2\0\3\21\11\0\1\21\5\0\7\21\2\0\7\21\3\0"+
    "\5\21\u010b\0\106\21\1\0\1\21\10\0\12\21\246\0\66\21\2\0"+
    "\11\21\77\0\101\21\3\0\1\21\13\0\12\21\46\0\70\21\10\0"+
    "\12\21\u01d6\0\100\21\12\21\25\0\1\21\u01c0\0\71\21\u0507\0\u0399\21"+
    "\147\0\157\21\u0b91\0\u042f\21\u33d1\0\u0239\21\7\0\37\21\1\0\12\21"+
    "\146\0\36\21\2\0\5\21\13\0\67\21\11\0\4\21\14\0\12\21"+
    "\11\0\25\21\5\0\23\21\u0370\0\105\21\13\0\57\21\20\0\21\21"+
    "\u4060\0\2\21\u0bfe\0\153\21\5\0\15\21\3\0\11\21\7\0\12\21"+
    "\3\0\2\21\u14c6\0\5\21\3\0\6\21\10\0\10\21\2\0\7\21"+
    "\36\0\4\21\224\0\3\21\u01bb\0\125\21\1\0\107\21\1\0\2\21"+
    "\2\0\1\21\2\0\2\21\2\0\4\21\1\0\14\21\1\0\1\21"+
    "\1\0\7\21\1\0\101\21\1\0\4\21\2\0\10\21\1\0\7\21"+
    "\1\0\34\21\1\0\4\21\1\0\5\21\1\0\1\21\3\0\7\21"+
    "\1\0\u0154\21\2\0\31\21\1\0\31\21\1\0\37\21\1\0\31\21"+
    "\1\0\37\21\1\0\31\21\1\0\37\21\1\0\31\21\1\0\37\21"+
    "\1\0\31\21\1\0\10\21\2\0\62\21\u1000\0\305\21\13\0\7\21"+
    "\u0529\0\4\21\1\0\33\21\1\0\2\21\1\0\1\21\2\0\1\21"+
    "\1\0\12\21\1\0\4\21\1\0\1\21\1\0\1\21\6\0\1\21"+
    "\4\0\1\21\1\0\1\21\1\0\1\21\1\0\3\21\1\0\2\21"+
    "\1\0\1\21\2\0\1\21\1\0\1\21\1\0\1\21\1\0\1\21"+
    "\1\0\1\21\1\0\2\21\1\0\1\21\2\0\4\21\1\0\7\21"+
    "\1\0\4\21\1\0\4\21\1\0\1\21\1\0\12\21\1\0\21\21"+
    "\5\0\3\21\1\0\5\21\1\0\21\21\u0274\0\32\21\6\0\32\21"+
    "\6\0\32\21\u0e76\0\ua6d7\21\51\0\u1035\21\13\0\336\21\u3fe2\0\u021e\21"+
    "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u06ed\0"+
    "\360\21\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\2\0\1\2\1\3\1\1\1\3\1\1\2\4"+
    "\1\1\2\2\1\5\1\6\1\7\2\10\1\11\1\12"+
    "\1\13\1\14\1\1\1\4\1\15\2\0\1\16\3\0"+
    "\1\10\1\17\3\0\1\16\2\0\1\10\1\0\1\4"+
    "\3\0\1\10\1\0\1\20\1\0\1\10\4\0\1\21"+
    "\1\4\2\0\1\22";

  private static int [] zzUnpackAction() {
    int [] result = new int[59];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\36\0\74\0\132\0\170\0\226\0\264\0\322"+
    "\0\132\0\360\0\u010e\0\u012c\0\u014a\0\132\0\132\0\132"+
    "\0\u0168\0\u0186\0\132\0\132\0\u01a4\0\132\0\u01c2\0\u01e0"+
    "\0\132\0\u01fe\0\u021c\0\u023a\0\u0258\0\u0276\0\u0294\0\u02b2"+
    "\0\u01c2\0\u02d0\0\u02ee\0\u030c\0\132\0\u032a\0\u0348\0\u0366"+
    "\0\u0384\0\u02d0\0\u03a2\0\u03c0\0\u03de\0\u03fc\0\u041a\0\u032a"+
    "\0\u0438\0\u0456\0\u0474\0\u0492\0\u04b0\0\u04ce\0\132\0\u03de"+
    "\0\u04ec\0\u050a\0\u050a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[59];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\4\10\1\11\1\12\1\11"+
    "\5\10\1\13\1\4\1\14\1\10\1\15\1\16\2\4"+
    "\1\11\2\4\1\17\1\20\1\4\13\21\1\22\3\21"+
    "\1\23\13\21\1\24\2\21\33\25\1\24\1\25\1\26"+
    "\37\0\1\5\1\10\1\5\1\27\3\10\3\0\6\10"+
    "\2\0\1\10\13\0\1\5\1\10\1\7\4\10\3\0"+
    "\6\10\2\0\1\10\13\0\3\10\1\27\3\10\3\0"+
    "\6\10\2\0\1\10\13\0\7\10\3\0\6\10\2\0"+
    "\1\10\22\0\1\11\26\0\7\10\3\0\5\10\1\30"+
    "\2\0\1\10\1\0\1\31\3\0\1\32\5\0\1\33"+
    "\1\0\1\33\17\0\1\33\17\0\1\34\5\0\4\34"+
    "\1\0\1\35\2\0\1\34\2\0\1\36\3\0\1\37"+
    "\3\0\17\21\1\0\13\21\1\0\16\21\1\40\2\21"+
    "\1\0\13\21\1\0\2\21\33\25\1\0\1\25\2\0"+
    "\1\41\1\10\1\41\4\10\3\0\6\10\2\0\1\10"+
    "\12\0\10\30\1\11\1\12\24\30\31\42\1\43\4\42"+
    "\1\0\1\44\1\0\1\44\17\0\1\44\13\0\3\34"+
    "\1\0\2\34\4\0\5\34\3\0\1\34\1\0\1\45"+
    "\11\0\7\35\3\0\6\35\2\0\1\35\1\0\1\31"+
    "\10\0\10\46\2\0\15\46\2\0\5\46\2\0\1\47"+
    "\33\0\14\21\1\50\2\21\1\0\13\21\1\0\2\21"+
    "\31\42\1\51\24\42\1\52\10\42\1\51\4\42\1\0"+
    "\1\53\1\0\1\53\17\0\1\53\12\0\10\46\2\0"+
    "\14\46\1\54\2\0\5\46\2\0\1\55\33\0\15\21"+
    "\1\56\1\21\1\0\13\21\1\0\2\21\20\42\1\11"+
    "\10\42\1\51\4\42\1\0\1\57\1\0\1\57\17\0"+
    "\1\57\12\0\10\46\2\0\13\46\1\60\1\54\2\0"+
    "\5\46\2\55\1\61\5\55\2\0\15\55\2\0\5\55"+
    "\16\21\1\62\1\63\13\21\1\0\2\21\1\0\1\64"+
    "\1\0\1\64\17\0\1\64\12\0\2\55\1\65\5\55"+
    "\2\0\15\55\2\0\5\55\17\21\1\63\13\21\1\0"+
    "\2\21\20\0\1\66\16\0\1\67\1\0\1\67\17\0"+
    "\1\67\12\0\2\55\1\65\5\55\2\0\13\55\1\70"+
    "\1\55\2\0\5\55\20\0\1\71\16\0\1\72\1\0"+
    "\1\72\1\0\2\72\4\0\4\72\2\0\1\72\1\0"+
    "\1\72\13\0\6\73\4\0\4\73\1\0\4\73\12\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1320];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\2\0\1\11\4\1\1\11\4\1\3\11\2\1"+
    "\2\11\1\1\1\11\2\1\1\11\2\0\1\1\3\0"+
    "\2\1\3\0\1\11\2\0\1\1\1\0\1\1\3\0"+
    "\1\1\1\0\1\1\1\0\1\1\4\0\1\11\1\1"+
    "\2\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[59];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */

/**
 * Return a new Symbol with the given token id, and with the current line and
 * column numbers.
 */
Symbol newSym(int tokenId) {
    return new Symbol(tokenId, yyline, yycolumn);
}

/**
 * Return a new Symbol with the given token id, the current line and column
 * numbers, and the given token value.  The value is used for tokens such as
 * identifiers and numbers.
 */
Symbol newSym(int tokenId, Object value) {
    return new Symbol(tokenId, yyline, yycolumn, value);
}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2692) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return newSym(sym.IDENT, yytext());
            }
          case 19: break;
          case 2: 
            { return newSym(sym.ZERO, "ERROR: "+yytext());
            }
          case 20: break;
          case 3: 
            { return newSym(sym.INT, new Integer(yytext()));
            }
          case 21: break;
          case 4: 
            { /* ignore */
            }
          case 22: break;
          case 5: 
            { return newSym(sym.CLOSETAG, yytext());
            }
          case 23: break;
          case 6: 
            { yybegin(STRING); return newSym(sym.ANF, "ANF_AUF");
            }
          case 24: break;
          case 7: 
            { return newSym(sym.EQ, yytext());
            }
          case 25: break;
          case 8: 
            { return newSym(sym.CHAR, yytext());
            }
          case 26: break;
          case 9: 
            { yybegin(VALUE); return newSym(sym.COLON, yytext());
            }
          case 27: break;
          case 10: 
            { yybegin(YYINITIAL); return newSym(sym.ANF, "ANF_ZU");
            }
          case 28: break;
          case 11: 
            { return newSym(sym.VALUE, yytext());
            }
          case 29: break;
          case 12: 
            { yybegin(STRING); return newSym(sym.SEMICOLON, yytext());
            }
          case 30: break;
          case 13: 
            { return newSym(sym.ENDTAG, yytext());
            }
          case 31: break;
          case 14: 
            { return newSym(sym.OPENTAG, yytext());
            }
          case 32: break;
          case 15: 
            { return newSym(sym.REAL, new Double(yytext()));
            }
          case 33: break;
          case 16: 
            { return newSym(sym.HEADERTAG, yytext());
            }
          case 34: break;
          case 17: 
            { return newSym(sym.COLOR, yytext());
            }
          case 35: break;
          case 18: 
            { return newSym(sym.URL, yytext());
            }
          case 36: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
